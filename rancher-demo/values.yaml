replicaCount: 3

image:
  repository: bgulla/rancher-demo
  pullPolicy: IfNotPresent
  tag: "latest"

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: ""
  annotations: {}  
  hosts:
    - host: rancher-demo.local
      paths:
        - path: /
          pathType: ImplementationSpecific


##### FOR NOW AT LEAST ONE ENV MUST EXIST #####
# Avaliable ENV options are:
  # TITLE: sets title in demo app
  # SHOW_VERSION: show version of app in ui (VERSION env var)
  # REFRESH_INTERVAL: interval in milliseconds for page to refresh (default: 1000)
  # EXPIRE_INTERVAL: how long a replica can go without being seen before we remove it from the display (default: 10s)
  # REMOVE_INTERVAL: how long after EXPIRE_INTERVAL until we remove the icon (default: 20s)
  # SKIP_ERRORS: set this to prevent errors from counting (useful on janky load balancers)
  # METADATA: extra text at bottom of info area
  # COW_COLOR: what color the cow background should be (default: black). Valid options are any color from the CSS pallete, including:
    # red
    # orange
    # yellow
    # olive
    # green
    # teal
    # blue
    # violet
    # purple
    # pink
    # black
env:
  TITLE: "Rancher Government Solutions Demo"
  SHOW_VERSION: false
  METADATA: "Deployed via Fleet"
  COW_COLOR: "blue"



serviceAccount:
  create: true
  annotations: {}
  name: "rancher-demo"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  requests:
    cpu: 5m
    memory: 10Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

